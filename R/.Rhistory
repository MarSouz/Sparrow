# Conectar ao banco de dados
con <- dbConnect(
MySQL(),
dbname = "Sparrow",
host = "localhost",
user = "ROOT",
password = "manu"
)
install.packages("DBI")
install.packages("RMySQL")
library(DBI)
library(RMySQL)
# Conectar ao banco de dados
con <- dbConnect(
MySQL(),
dbname = "Sparrow",
host = "localhost",
user = "ROOT",
password = "manu"
)
# Conectar ao banco de dados
con <- dbConnect(
MySQL(),
dbname = "Sparrow",
host = "localhost",
user = "root",
password = "manu"
)
# Definir o período em dias (pode ser 7, 15 ou 30)
periodo_dias <- 7
# Consulta para obter dados e contar alertas críticos por hora
query <- sprintf(
"SELECT
fk_empresa,
fk_maquina,
fk_dado_monitorado,
registro,
data_hora,
limite_componente
FROM dado_capturado dc
JOIN maquina_dado_monitorado mdm ON dc.fk_maquina = mdm.fk_maquina
AND dc.fk_empresa = mdm.fk_empresa
AND dc.fk_dado_monitorado = mdm.fk_dado_monitorado
WHERE data_hora >= NOW() - INTERVAL %d DAY;",
periodo_dias
)
# Executar a consulta e obter os dados filtrados
dados <- dbGetQuery(con, query)
# Consulta para obter dados e contar alertas críticos por hora
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dc.registro,
dc.data_hora
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
empresa AS e ON m.fk_empresa = e.id
WHERE
dc.data_hora >= NOW() - INTERVAL 7 DAY;",
periodo_dias
)
# Consulta para obter dados e contar alertas críticos por hora
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dc.registro,
dc.data_hora
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
empresa AS e ON m.fk_empresa = e.id
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY;",
periodo_dias
)
# Executar a consulta e obter os dados filtrados
dados <- dbGetQuery(con, query)
# Verificar e contar os alertas críticos por hora
dados <- dados %>%
mutate(
alerta_critico = ifelse(registro > limite_componente, 1, 0),
hora = format(as.POSIXct(data_hora), "%Y-%m-%d %H:00:00")  # Agrupar por hora
) %>%
group_by(fk_empresa, fk_maquina, fk_dado_monitorado, hora) %>%
summarise(
total_alertas_criticos = sum(alerta_critico)
)
install.packages("dplyr")
library(dplyr)
library(dplyr)
# Verificar e contar os alertas críticos por hora
dados <- dados %>%
mutate(
alerta_critico = ifelse(registro > limite_componente, 1, 0),
hora = format(as.POSIXct(data_hora), "%Y-%m-%d %H:00:00")  # Agrupar por hora
) %>%
group_by(fk_empresa, fk_maquina, fk_dado_monitorado, hora) %>%
summarise(
total_alertas_criticos = sum(alerta_critico)
)
# Consulta para obter dados e contar alertas críticos por hora
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dc.registro,
dc.data_hora,
mdf.limite_componente
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
WHERE
dc.data_hora >= NOW() - INTERVAL 7 DAY;
",
periodo_dias
)
# Instalar pacotes necessários
install.packages("DBI")
install.packages("RMySQL")
install.packages("dplyr")  # Pacote dplyr, necessário para %>%
# Carregar as bibliotecas
library(DBI)
library(RMySQL)
library(dplyr)  # Importar dplyr para usar %>%
# Conectar ao banco de dados
con <- dbConnect(
MySQL(),
dbname = "Sparrow",
host = "localhost",
user = "root",
password = "manu"
)
# Definir o período em dias (pode ser 7, 15 ou 30)
periodo_dias <- 7
# Consulta para obter os dados de captura e limites de componentes
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dc.registro,
dc.data_hora,
mdf.limite_componente
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY;",
periodo_dias
)
# Executar a consulta e obter os dados filtrados
dados <- dbGetQuery(con, query)
# Verificar e contar os alertas críticos por hora
dados <- dados %>%
mutate(
alerta_critico = ifelse(registro > limite_componente, 1, 0),
hora = format(as.POSIXct(data_hora), "%Y-%m-%d %H:00:00")  # Agrupar por hora
) %>%
group_by(fk_empresa, fk_maquina, fk_dado_monitorado, hora) %>%
summarise(
total_alertas_criticos = sum(alerta_critico)
)
# Visualizar os resultados
print(dados)
ggplot(dados, aes(x = componente_nome, y = total_alertas_criticos, fill = componente_nome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Total de Alertas Críticos por Componente",
x = "Componente",
y = "Total de Alertas Críticos",
fill = "Componente"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Girar os rótulos do eixo X
theme_minimal()
library(ggplot2)
ggplot(dados, aes(x = componente_nome, y = total_alertas_criticos, fill = componente_nome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Total de Alertas Críticos por Componente",
x = "Componente",
y = "Total de Alertas Críticos",
fill = "Componente"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Girar os rótulos do eixo X
theme_minimal()
ggplot(dados, aes(x = componente_nome, y = total_alertas_criticos, fill = componente_nome)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Total de Alertas Críticos por Componente",
x = "Componente",
y = "Total de Alertas Críticos",
fill = "Componente"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Girar os rótulos do eixo X
theme_minimal()
# Consulta para obter os dados de captura e limites de componentes
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome AS componente_nome,  -- Nome do componente (CPU, RAM, etc.)
HOUR(dc.data_hora) AS hora,  -- Hora de captura
COUNT(a.id) AS total_alertas_criticos  -- Contagem de alertas críticos
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
JOIN
dado_monitorado AS dm ON dm.id = dc.fk_dado_monitorado
LEFT JOIN
alerta AS a ON a.fk_dado_maquina = dc.id  -- Verificando se existe alerta para esse dado capturado
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY  -- Substituir %d com o número de dias (7, 15, 30, etc.)
GROUP BY
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome,
HOUR(dc.data_hora)
ORDER BY
hora;",
periodo_dias
)
# Conectar ao banco de dados
con <- dbConnect(
MySQL(),
dbname = "Sparrow",
host = "localhost",
user = "root",
password = "manu"
)
# Definir o período em dias
periodo_dias <- 7
# Consulta para obter os dados de captura e limites de componentes
query <- sprintf(
"SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome AS componente_nome,  -- Nome do componente (CPU, RAM, etc.)
HOUR(dc.data_hora) AS hora,  -- Hora de captura
COUNT(a.id) AS total_alertas_criticos  -- Contagem de alertas críticos
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
JOIN
dado_monitorado AS dm ON dm.id = dc.fk_dado_monitorado
LEFT JOIN
alerta AS a ON a.fk_dado_maquina = dc.id  -- Verificando se existe alerta para esse dado capturado
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY  -- Substituir %d com o número de dias (7, 15, 30, etc.)
GROUP BY
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome,
HOUR(dc.data_hora)
ORDER BY
hora;",
periodo_dias
)
# Definir a consulta SQL
query <- sprintf("
SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome AS componente_nome,
HOUR(dc.data_hora) AS hora,
COUNT(a.id) AS total_alertas_criticos
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
JOIN
dado_monitorado AS dm ON dm.id = dc.fk_dado_monitorado
LEFT JOIN
alerta AS a ON a.fk_dado_maquina = dc.id
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY
GROUP BY
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome,
HOUR(dc.data_hora)
ORDER BY
hora;",
periodo_dias
)
# Definir a consulta SQL
query <- sprintf("
SELECT
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome AS componente_nome,
HOUR(dc.data_hora) AS hora,
COUNT(a.id) AS total_alertas_criticos
FROM
dado_capturado AS dc
JOIN
maquina AS m ON dc.fk_maquina = m.id
JOIN
maquina_dado_monitorado AS mdf ON mdf.fk_empresa = dc.fk_empresa
AND mdf.fk_maquina = dc.fk_maquina
AND mdf.fk_dado_monitorado = dc.fk_dado_monitorado
JOIN
dado_monitorado AS dm ON dm.id = dc.fk_dado_monitorado
LEFT JOIN
alerta AS a ON a.fk_dado_maquina = dc.id
WHERE
dc.data_hora >= NOW() - INTERVAL %d DAY
GROUP BY
dc.fk_empresa,
dc.fk_maquina,
dc.fk_dado_monitorado,
dm.nome,
HOUR(dc.data_hora)
ORDER BY
hora;",
periodo_dias
)
